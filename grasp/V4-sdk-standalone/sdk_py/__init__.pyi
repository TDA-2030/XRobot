from __future__ import annotations
import motormaster
import typing

__all__ = [
    "axis_modbus",
    "create_axis_modbus_rtu",
    "create_axis_modbus_tcp",
    "destroy_axis"
]


class axis_modbus():
    def config_motion(self, velocity: float, acceleration: float, deacceleration: float) -> None: ...
    def error_code(self) -> int: ...
    def execute_command(self, arg0: command) -> None: ...
    def force_sensor(self) -> float: ...
    def get_command(self, index: int) -> command: ...
    def get_output_signal(self, arg0: str) -> bool: ...
    def get_version(self) -> version: ...
    def go_home(self) -> None: ...
    def is_moving(self) -> bool: ...
    def is_push_empty(self) -> bool: ...
    def is_reached(self) -> bool: ...
    def load_commands(self) -> None: ...
    def load_parameters(self) -> None: ...
    def move_absolute(self, position: float, velocity: float, acceleration: float, deacceleration: float, band: float) -> None: ...
    """
    position	位置 mm
    velocity	速度 mm/s
    acceleration	加速度 mm/s^2
    deacceleration	减速度 mm/s^2
    band	定位范围 mm
    """
    def move_relative(self, position: float, velocity: float, acceleration: float, deacceleration: float, band: float) -> None: ...
    """
    position	位置 mm
    velocity	速度 mm/s
    acceleration	加速度 mm/s^2
    deacceleration	减速度 mm/s^2
    band	定位范围 mm
    """
    def move_to(self, position: float) -> None: ...
    def position(self) -> float: ... # 返回值 位置 mm
    def precise_push(self, force: float, distance: float, velocity: float, force_band: float, force_check_time: int) -> None: ...
    def push(self, force: float, distance: float, velocity: float) -> None: ... 
    """
    force	出力 %
    distance	距离 mm
    velocity	速度 mm/s
    """
    def reset_error(self) -> None: ...
    def save_commands(self) -> None: ...
    def save_parameters(self) -> None: ...
    def set_command(self, index: int, arg1: command) -> None: ...
    def set_input_signal(self, signal: str, level: bool) -> None: ...
    def set_servo_on_off(self, on_off: bool) -> None: ...
    def stop(self) -> None: ...
    def torque(self) -> float: ...
    def trig_command(self, index: int) -> None: ...
    def velocity(self) -> float: ...
    pass
def create_axis_modbus_rtu(port: str, buad: int, slave_addr: int) -> axis_modbus:
    pass
def create_axis_modbus_tcp(ip: str, port: int, slave_addr: int) -> axis_modbus:
    pass
def destroy_axis(arg0: axis_modbus) -> None:
    pass
